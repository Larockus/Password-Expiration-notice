# Import Active Directory module
Import-Module ActiveDirectory

# Load credentials from the JSON file, This needs to be changed to match the directory on the local machine
$credentials = Get-Content -Path 'C:\SomeLocalFolder\credentials.json' | ConvertFrom-Json

# Convert password to SecureString
$SecurePassword = $credentials.password | ConvertTo-SecureString -AsPlainText -Force
$Credential = New-Object System.Management.Automation.PSCredential ($credentials.username, $SecurePassword)

# Load email body from the HTML file
$emailBodyTemplate = Get-Content -Path 'C:\SomeLocalFolder\emailBody.html' -Raw

# Distinguished Name of the OU to search in
$ouDistinguishedName = "OU=Users,OU=Container,DC=domain,DC=local/lan etc..."

# Get all AD users within the specified OU with PasswordNeverExpires set to False and Enabled set to True
$users = Get-ADUser -SearchBase $ouDistinguishedName -filter * -properties PasswordNeverExpires, PasswordExpired, PasswordLastSet, EmailAddress, Enabled, "msDS-ResultantPSO" | where { $_.PasswordNeverExpires -eq $false -and $_.Enabled -eq $true }

foreach ($user in $users) {
    # Determine if a FGPP applies to the user by checking the msDS-ResultantPSO attribute
    $maxPasswordAge = (Get-ADDefaultDomainPasswordPolicy).MaxPasswordAge # default to domain policy
    if ($user.'msDS-ResultantPSO') {
        # User has FGPP applied, get the FGPP policy object
        $resultantPSO = Get-ADObject -Identity $user.'msDS-ResultantPSO' -Properties 'msDS-MaximumPasswordAge'
        if ($resultantPSO) {
            $maxPasswordAge = $resultantPSO.'msDS-MaximumPasswordAge'
        }
    }
    
    # Calculate when the password will expire
    $passwordSetDate = $user.PasswordLastSet
    $expireson = $passwordSetDate + $maxPasswordAge
    $today = (Get-Date)
    
    # Check if password will expire in 14 days or less
    $daystoExpire = (New-TimeSpan -Start $today -End $expireson).Days
    
    # Ignore the passwords that expired more than 30 days ago
    if ($daystoExpire -le 14 -and $daystoExpire -ge -30) {
        # If in test mode, send email to the test email address. Else, send email to the user's email.
        $emailTo = if ($credentials.testMode) { $credentials.testEmail } else { $user.EmailAddress }
        $subject = "Your password will expire in $daystoExpire days."
        $body = $emailBodyTemplate.Replace('{name}', $user.Name).Replace('{days}', $daystoExpire)
        
        # Send email to user
        Send-MailMessage -To $emailTo -From $credentials.sharedMailbox -Subject $subject -Body $body -BodyAsHtml -SmtpServer $credentials.smtpServer -Credential $Credential -UseSsl -Port 587
    }
}
